const express = require('express');

const path = require('path');
const appRoot = require('app-root-path');

const config = require(`${appRoot}/config`);

const createError = require('http-errors');

const winston = require(`${appRoot}/config/winston`);
const morgan = require('morgan');

const apiRouter = require('./routes/api');
const indexRouter = require('./routes/index');

const dbConnection = require(`${appRoot}/lib/dbConnection`);

const cors = require('cors');


const app = express();


// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

winston.info('using cors');
app.use(cors());


if (config.env === 'production') {
	winston.info("adding production cross-domain allow as middleware");
	app.use((req, res, next) =>{
		res.header('Access-Control-Allow-Origin', '*');
		//res.header('Access-Control-Allow-Origin', 'http://127.0.0.1:8090');
		//res.header('Access-Control-Allow-Methods', 'POST');
		//res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
		next();
	})
}


// The app will use Morgan for request logging, but we want Morgan to use Winston.
app.use(morgan(config.logging.morgan.format, {
	stream: winston.stream
}));

app.use(express.json());
app.use(express.urlencoded({extended: false}));

//app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// allow cross-domain requests from local dev server
if (config.env === 'development') {
	winston.info("adding development cross-domain allow as middleware");
	app.use((req, res, next) =>{
		res.header('Access-Control-Allow-Origin', 'http://localhost:8080');
		next();
	})
}


app.use('/', indexRouter);
//app.use('/users', usersRouter);
app.use('/api', apiRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
	next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
	// set locals, only providing error in development
	res.locals.message = err.message;
	res.locals.error = req.app.get('env') === 'development' ? err : {};

	//log the error in winston
	let msg = `${err.status || 500} - ${err.message} - ${req.originalUrl} - ${req.method} - ${req.ip}`;
	winston.error(msg);

	// render the error page
	res.status(err.status || 500);
	res.render('error');
});

winston.debug('app.js loaded');

app.closeDbConnection = function() {
	dbConnection.close();
};

winston.info(`NODE_ENV = ${process.env.NODE_ENV}`);
winston.info(`config.env = ${config.env}`);

if (config.env !== 'test') {
	app.listen(config.express.port);
	winston.info(`listening on port ${config.express.port}`);
}

module.exports = app;



